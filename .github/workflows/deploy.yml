name: Deploy Spring Boot App with Docker

on:
  push:
    branches:
      - main  # Change this if needed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v3

      - name: Clean and Build Spring Boot App
        run: ./gradlew clean build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-app:latest

      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy on Remote Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            # Stop and remove the existing container if running
            docker-compose -f ${{ secrets.DOCKER_COMPOSE_PATH }} down || true
          
            # Remove the old Docker image (ignore errors if it doesn't exist)
            docker rmi ${{ secrets.DOCKER_USERNAME }}/spring-app:latest || true
          
            # Pull the new image
            docker pull ${{ secrets.DOCKER_USERNAME }}/spring-app:latest
          
            # Start the updated service
            docker-compose -f ${{ secrets.DOCKER_COMPOSE_PATH }} up -d
          
            # Clean up dangling images
            docker image prune -f
          EOF
